import time
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command, Filter
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.methods import DeleteMessage, EditMessageText
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from Keyboards.Expense.category import (TodayCallback, ChooseCategoryCallback,
                                        create_today_kb, category_choose_kb)

from Keyboards.Expense.types import create_type_kb, ChooseTypeCallback, BackToCategoriesCallback

from create_bot import bot

from Database.create_database import Expense as ExpenseDB

expensesRouter = Router()


class CheckDate(Filter):
    def __init__(self, date: str) -> None:
        self.date = date

    async def __call__(self, message: Message) -> bool:
        self.date = message.text

        try:
            valid_date = time.strptime(self.date, '%d.%m.%y')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞
            if not (2022 <= valid_date.tm_year <= 2030):
                return True  # –ì–æ–¥ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 2022 –¥–æ 2030

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
            input_datetime = datetime(valid_date.tm_year, valid_date.tm_mon, valid_date.tm_mday)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            current_datetime = datetime.now()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π
            if input_datetime > current_datetime:
                return True  # –í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã

        except ValueError:
            return True  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

        return False  # –î–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏


class CheckAmount(Filter):
    def __init__(self, amount: str) -> None:
        self.amount = amount

    async def __call__(self, message: Message) -> bool:
        self.amount = message.text

        if ',' in self.amount:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è
                print(float(self.amount.replace(',', '.')))
                return not (float(self.amount.replace(',', '.')) > 0.0)
            except ValueError:
                return True
        elif '.' in self.amount:
            return True  # –í—Å—Ç—Ä–µ—á–µ–Ω–∞ —Ç–æ—á–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        else:
            try:
                print(float(self.amount))
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è
                return not (float(self.amount) > 0.0)
            except ValueError:
                return True  # –í—Å—Ç—Ä–µ—á–µ–Ω—ã –±—É–∫–≤—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True


class Expense(StatesGroup):
    date_message_id = State()
    date = State()
    category = State()
    type = State()
    amount = State()
    comment = State()


@expensesRouter.message(Command("expense"))
@expensesRouter.message(F.text.casefold() == "—Ä–∞—Å—Ö–æ–¥")
async def start_messaging(message: Message, state: FSMContext) -> None:
    sent_message = await message.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞:",
                                        reply_markup=create_today_kb())
    await state.update_data(date_message_id=sent_message.message_id)
    await state.set_state(Expense.date)


@expensesRouter.message(Command("cancel_expense"))
@expensesRouter.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–∞")
async def delete_expense_adding(message: Message, state: FSMContext) -> None:
    await message.answer(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()


@expensesRouter.callback_query(Expense.date, TodayCallback.filter())
async def change_date(query: CallbackQuery, callback_data: TodayCallback, state: FSMContext):
    await state.set_state(Expense.date)
    date = callback_data.today
    await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
    await query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}", reply_markup=None)

    await state.update_data(date=date)

    await query.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_choose_kb())
    await state.set_state(Expense.category)


@expensesRouter.message(Expense.date, CheckDate(F.text))
async def invalid_date_format(message: Message, state: FSMContext):
    await message.answer(text="–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2022 –¥–æ 2030 –∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. üìÖ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
    await state.set_state(Expense.date)


@expensesRouter.message(Expense.date)
async def set_date_text(message: Message, state: FSMContext):
    date = message.text
    chat_id = message.chat.id

    await message.delete()

    await state.update_data(date=date)

    date_message_id = (await state.get_data())["date_message_id"]
    await bot(EditMessageText(chat_id=chat_id, message_id=date_message_id,
                              text=f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}", reply_markup=None))
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_choose_kb())

    await state.set_state(Expense.category)


@expensesRouter.callback_query(Expense.category, ChooseCategoryCallback.filter())
async def set_category(query: CallbackQuery, callback_data: ChooseCategoryCallback, state: FSMContext):
    await query.answer()

    category_id = callback_data.category_id
    category_name = callback_data.category_name

    await query.message.edit_text(text=f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "{category_name}". –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:',
                                  reply_markup=create_type_kb(category_id))
    await state.set_state(Expense.type)


@expensesRouter.callback_query(Expense.type, BackToCategoriesCallback.filter(F.back == True))
async def back_to_categories(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_choose_kb())
    await state.set_state(Expense.category)


@expensesRouter.callback_query(Expense.type, ChooseTypeCallback.filter())
async def set_category(query: CallbackQuery, callback_data: ChooseTypeCallback, state: FSMContext):
    await query.answer()

    category_id = callback_data.category_id
    category_name = callback_data.category_name

    type_id = callback_data.type_id
    type_name = callback_data.type_name

    await state.update_data(category={"category_id": category_id, "category_name": category_name},
                            type={"type_id": type_id, "type_name": type_name})
    await query.message.edit_text(text=f'–í—ã–±—Ä–∞–Ω —Ç–∏–ø "{type_name}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category_name}"')
    await query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")

    await state.set_state(Expense.amount)


@expensesRouter.message(Expense.amount, CheckAmount(F.text))
async def incorrect_amount(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    await state.set_state(Expense.amount)


@expensesRouter.message(Expense.amount)
async def set_amount(message: Message, state: FSMContext):
    amount = float(message.text.replace(',', '.'))
    await state.update_data(amount=amount)

    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    await state.set_state(Expense.comment)


@expensesRouter.message(Expense.comment)
async def set_comment(message: Message, state: FSMContext):
    comment = message.text
    data = (await state.get_data())

    date = data["date"]
    category_id = data["category"]["category_id"]
    category_name = data["category"]["category_name"]
    type_id = data["type"]["type_id"]
    type_name = data["type"]["type_name"]
    amount = data["amount"]

    ExpenseDB.add_expense(date, category_id, type_id, amount, comment)

    await message.answer(text=f"<b>‚ú® –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥</b>\n"
                              f"–î–∞—Ç–∞: <code>{date}</code>\n"
                              f"–¢–∏–ø: <code>{type_name}</code>\n"
                              f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{category_name}</code>\n"
                              f"–°—É–º–º–∞: <code>{amount}</code>\n"
                              f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>\n")
